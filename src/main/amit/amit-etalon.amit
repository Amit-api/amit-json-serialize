/**
 * The amit etalon file
 * this file is used to test all amit functionality
 */
[java_package="com.amitapi.etalon"]
project amit_etalon;

enum IntEnum {
	first = 1,
	second = 2,
	third = 3
}

enum StringEnum {
	first = "first",
	second = "second",
	third = "th\"ird"
}

enum MixedEnum {
	first = 1,
	second = "2",
	third = "third"
}

type PrimitiveTypes {
	boolean theBoolean;
	int theInt;
	long theLong;
	double theDouble;
	string theString;
	datetime theDate;
	uuid theUiid;	
}

validation pt1 for PrimitiveTypes {
	theBoolean !null;
	theInt !null [1..1000];
	theLong !null [..1000];
	theDouble !null;
	theString !null !empty [1..100];
	theDate !null;
	theUiid !null;
}

type ArrayPrimitiveTypes {
	array boolean theBoolean;
	array int theInt;
	array long theLong;
	array double theDouble;
	array string theString;
	array datetime theDate;
	array uuid theUiid;	
}

validation pt2 for ArrayPrimitiveTypes {
	theBoolean !null;
	theInt !null [1..1000];
	theInt[] !null [4..5];
	theLong !null [..1000];
	theDouble !null;
	theString !null !empty [1..100];
	theDate !null;
	theUiid !null;
}

type MapPrimitiveTypes {
	map boolean theBoolean;
	map int theInt;
	map long theLong;
	map double theDouble;
	map string theString;
	map datetime theDate;
	map uuid theUiid;	
}

validation pt3 for MapPrimitiveTypes {
	theBoolean !null;
	theInt !null [1..1000];
	theInt{} !null [..40];
	theLong !null [..1000];
	theDouble !null;
	theString !null !empty [1..100];
	theDate !null;
	theUiid !null;
}

type Enums {
	IntEnum e1;
	array IntEnum e2;
	StringEnum e3;
	StringEnum e4;
}

type Base {
	int v1;
}

validation validateBaseType for Base {
	v1 !null [0..100];
}

type Derived1 : Base {
	int v2;
}

validation validateDerived1 for Derived1 {
	v2 !null [0..100];
}

type Derived2 : Base {
	int v2;
}

type ComplexType {
	Base base;
	array Base moreBase;
	map Base mapBase;
}

type CustomType {
	int v;
}

type SimpleType {
	CustomType ctype;
	array CustomType ctypes;
	map CustomType mtypes;
}



exception MyException {
	boolean theBoolean;
	int theInt;
	long theLong;
	double theDouble;
	string theString;
	datetime theDate;
	uuid theUiid;
}

exception MyArrayException {
	array boolean theBoolean;
	array int theInt;
	array long theLong;
	array double theDouble;
	array string theString;
	array datetime theDate;
	array uuid theUiid;	
}


exception BaseException {
	int v1;
}

exception Derived1Exception : BaseException {
	int v2;
}

exception Derived2Exception : BaseException {
	int v2;
}

exception ComplexTypeException {
	Base base;
	array Base moreBase;
}


interface InterfaceTypes {
	
	void storeNumber( int intV, boolean boolV, long longV, double doubleV );
	
	void storeOtherType( string strV, datetime dateV, uuid uuidV ) throws MyException;
}

interface IntrfaceArrayTypes {
	void storeNumbers( array int intV, array boolean boolV, array long longV, array double doubleV ) throws MyArrayException;
	
	void storeOtherTypes( array string strV, array datetime dateV, array uuid uuidV ) throws MyArrayException;	
}

interface InterfaceReturn {
	PrimitiveTypes returnType() throws BaseException, MyArrayException;
	array PrimitiveTypes returnArrayType() throws BaseException, MyArrayException;
	void returnVoid() throws BaseException, MyArrayException;
	
	int returnInt() throws BaseException, MyArrayException;
	boolean returnBoolean() throws BaseException, MyArrayException;
	long returnLong() throws BaseException, MyArrayException;	
	double returnDouble() throws BaseException, MyArrayException;	
	datetime returnDatetime() throws BaseException, MyArrayException;
	string retungString() throws BaseException, MyArrayException;
	uuid retungUuid() throws BaseException, MyArrayException;
	
	array int returnIntArr() throws BaseException, MyArrayException;
	array boolean returnBooleanArr() throws BaseException, MyArrayException;
	array long returnLongArr() throws BaseException, MyArrayException;	
	array double returnDoubleArr() throws BaseException, MyArrayException;	
	array datetime returnDatetimeArr() throws BaseException, MyArrayException;
	array string retungStringArr() throws BaseException, MyArrayException;
	array uuid retungUuidArr() throws BaseException, MyArrayException;

	map int returnIntMap() throws BaseException, MyArrayException;
	map boolean returnBooleanMap() throws BaseException, MyArrayException;
	map long returnLongMap() throws BaseException, MyArrayException;	
	map double returnDoubleMap() throws BaseException, MyArrayException;	
	map datetime returnDatetimeMap() throws BaseException, MyArrayException;
	map string retungStringMap() throws BaseException, MyArrayException;
	map uuid retungUuidMap() throws BaseException, MyArrayException;
}

interface ValidateCalls {
	void validateprimitive( int intV, boolean boolV, long longV, double doubleV )
		validate {
			intV !null [1..100];
			boolV !null;
			longV !null [1..200];
		}; 
		
	void validateComplextType( ComplexType complex )
		validate {
			complex !null;
			validateBaseType;
			validateDerived1;
		};
}

interface AllInt : InterfaceTypes, IntrfaceArrayTypes, InterfaceReturn {
	void doNothing();
}


